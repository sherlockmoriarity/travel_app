/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: WON (https://sketchfab.com/won1)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/fire-in-the-sky-06d903f5dc5245699adf38192f77fbb6
Title: ...Fire in the sky
*/

import { useState,useRef, useEffect} from 'react';
import { useGLTF } from '@react-three/drei';
import React, { useCallback } from 'react';
import { useFrame, useThree } from '@react-three/fiber';
import {a} from '@react-spring/three';
import islandScene from '../assets/3d/toon_houses_night_version.glb';

const Island = ({ isRotating, setIsRotating, ...props })=>{
  const [currentStage, setCurrentStage] = useState(null);
  const islandRef = useRef();
  const { gl , viewport} = useThree(); 
  const { nodes, materials } = useGLTF(islandScene)
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;


  const handlePointerDown =  useCallback((event) => {
    console.log('yea');
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;
    lastX.current = clientX;
  },[setIsRotating]);

  const handlePointerUp = useCallback((event) => {
    console.log('yea');
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);
    
  },[setIsRotating]);

  const handlePointerMove = useCallback((event) => {
    console.log('yea');
    event.stopPropagation();
    event.preventDefault();
    
    if(isRotating){
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      lastX.current = clientX;

      rotationSpeed.current = delta * 0.01 * Math.PI;;
      }
  }, [isRotating]);

    const handleKeyDown = (event) => {
      if (event.key === "ArrowLeft") {
        if (!isRotating) setIsRotating(true);
  
        islandRef.current.rotation.y += 0.005 * Math.PI;
        rotationSpeed.current = 0.007;
      } else if (event.key === "ArrowRight") {
        if (!isRotating) setIsRotating(true);
  
        islandRef.current.rotation.y -= 0.005 * Math.PI;
        rotationSpeed.current = -0.007;
      }
    };
    const handleKeyUp = (event) => {
      if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
        setIsRotating(false);
      }
    };
  
    // Touch events for mobile devices
    


    useEffect(() => {
      const canvas = gl.domElement;
      console.log("Event listeners added to canvas:", gl.domElement);
      canvas.addEventListener("pointerdown", handlePointerDown);
      canvas.addEventListener("pointerup", handlePointerUp);
      canvas.addEventListener("pointermove", handlePointerMove);
      window.addEventListener("keydown", handleKeyDown);
      window.addEventListener("keyup", handleKeyUp);

      return () => {
        canvas.removeEventListener("pointerdown", handlePointerDown);
        canvas.removeEventListener("pointerup", handlePointerUp);
        canvas.removeEventListener("pointermove", handlePointerMove);
        window.removeEventListener("keydown", handleKeyDown);
        window.removeEventListener("keyup", handleKeyUp);

      }

    }, [gl,handlePointerDown, handlePointerUp, handlePointerMove]);

    useFrame(() => {
      if(!isRotating){
        rotationSpeed.current *= dampingFactor;
        if(Math.abs(rotationSpeed.current)< 0.001){
          rotationSpeed.current = 0;
        }
      }else {
        const rotation = islandRef.current.rotation.y;

        const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });
  
  return (
    
    <a.group ref = {islandRef}{...props} >
      
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          
          
          geometry={nodes.sky_1.geometry}
          material={materials.material}
        />
        <mesh
          
          
          geometry={nodes.houses_1.geometry}
          material={materials.houses}
        />
        <mesh
          
          
          geometry={nodes.smoke_1.geometry}
          material={materials.smoke}
          position={[0.833, 4.099, -3.944]}
        />
      </group>
    
      
    </a.group>
  );

}
useGLTF.preload(islandScene)
export default Island;